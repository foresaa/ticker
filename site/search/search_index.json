{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Software News Ticker Documentation","text":"<p>Welcome to the technical documentation for the Software News Ticker.</p>"},{"location":"app/","title":"Directory: <code>C:/ticker/app</code>","text":""},{"location":"app/#file-mainpy","title":"File: <code>main.py</code>","text":""},{"location":"app/#imports","title":"Imports:","text":"<ul> <li>from fastapi import FastAPI, Query</li> <li>from fastapi.responses import HTMLResponse</li> <li>from app.feeds import fetch_feeds</li> <li>from app.cache import cache_result</li> <li>from fastapi.staticfiles import StaticFiles</li> </ul>"},{"location":"app/#variablesconstants","title":"Variables/Constants:","text":"<pre><code>app = FastAPI()\n</code></pre> <pre><code>feeds = fetch_feeds(general_news, languages)\n</code></pre> <p>Click here to open the markmap file in a new tab</p>"},{"location":"cache/","title":"Directory: <code>C:/ticker/app/cache</code>","text":""},{"location":"cache/#file-cachepy","title":"File: <code>cache.py</code>","text":""},{"location":"cache/#imports","title":"Imports:","text":"<ul> <li>import time</li> <li>from functools import wraps</li> </ul>"},{"location":"cache/#functions","title":"Functions:","text":"<ul> <li>Function: <code>cache_result</code> (line 7)   Docstring: <code>Cache the result of a function for a specified time period.</code></li> </ul> <p>:param time: Cache duration in seconds (default is 10 minutes). :return: Wrapper function with caching applied.</p> <pre><code>```python\ndef cache_result(time=600):\n  \"\"\"\n  Cache the result of a function for a specified time period.\n\n  :param time: Cache duration in seconds (default is 10 minutes).\n  :return: Wrapper function with caching applied.\n  \"\"\"\n  def decorator(func):\n      @wraps(func)\n      async def wrapper(*args, **kwargs):\n          key = f\"{func.__name__}_{args}_{kwargs}\"\n          if key in cache:\n              result, timestamp = cache[key]\n              if time.time() - timestamp &lt; time:\n                  return result\n\n          result = await func(*args, **kwargs)\n          cache[key] = (result, time.time())\n          return result\n\n      return wrapper\n  return decorator\n</code></pre> <ul> <li>Function: <code>decorator</code> (line 14)</li> </ul> <p>```python       def decorator(func):         @wraps(func)         async def wrapper(args, *kwargs):             key = f\"{func.name}{args}{kwargs}\"             if key in cache:                 result, timestamp = cache[key]                 if time.time() - timestamp &lt; time:                     return result</p> <pre><code>        result = await func(*args, **kwargs)\n        cache[key] = (result, time.time())\n        return result\n\n    return wrapper\n</code></pre> <p>```</p>"},{"location":"cache/#variablesconstants","title":"Variables/Constants:","text":"<pre><code>cache = {}\n</code></pre> <pre><code>key = f\"{func.__name__}_{args}_{kwargs}\"\n</code></pre> <pre><code>result = await func(*args, **kwargs)\n</code></pre> <p>Click here to open the markmap file in a new tab</p>"},{"location":"feeds/","title":"Directory: <code>C:/ticker/app/feeds</code>","text":""},{"location":"feeds/#file-feedspy","title":"File: <code>feeds.py</code>","text":""},{"location":"feeds/#imports","title":"Imports:","text":"<ul> <li>import feedparser</li> </ul>"},{"location":"feeds/#functions","title":"Functions:","text":"<ul> <li>Function: <code>fetch_feeds</code> (line 12)   Docstring: <code>Fetch the feeds from various programming-related sources.</code></li> </ul> <p>:param include_general: Whether to include general development news. :param languages: Comma-separated list of programming languages. :return: List of feed entries.</p> <pre><code>```python\ndef fetch_feeds(include_general: bool, languages: str):\n  \"\"\"\n  Fetch the feeds from various programming-related sources.\n\n  :param include_general: Whether to include general development news.\n  :param languages: Comma-separated list of programming languages.\n  :return: List of feed entries.\n  \"\"\"\n  feeds_to_fetch = []\n\n  if include_general:\n      feeds_to_fetch.extend(FEEDS[\"general\"])\n\n  if languages:\n      for lang in languages.split(\",\"):\n          if lang in FEEDS[\"languages\"]:\n              feeds_to_fetch.append(FEEDS[\"languages\"][lang])\n\n  feed_entries = []\n  for feed_url in feeds_to_fetch:\n      feed = feedparser.parse(feed_url)\n      feed_entries.extend(feed.entries)\n\n  return feed_entries\n</code></pre>"},{"location":"feeds/#variablesconstants","title":"Variables/Constants:","text":"<pre><code>FEEDS = {\n  \"general\": [\"https://news.ycombinator.com/rss\", \"https://dev.to/feed\"],\n  \"languages\": {\n      \"python\": \"https://realpython.com/atom.xml\",\n      \"javascript\": \"https://javascriptweekly.com/rss\",\n      \"golang\": \"https://golangweekly.com/rss\",\n  }\n}\n</code></pre> <pre><code>feeds_to_fetch = []\n</code></pre> <pre><code>feed_entries = []\n</code></pre> <pre><code>feed = feedparser.parse(feed_url)\n</code></pre> <p>Click here to open the markmap file in a new tab</p>"},{"location":"utils/","title":"Directory: <code>C:/ticker/app/utils</code>","text":""},{"location":"utils/#file-utilspy","title":"File: <code>utils.py</code>","text":""},{"location":"utils/#functions","title":"Functions:","text":"<ul> <li>Function: <code>format_feed_entry</code> (line 1)   Docstring: <code>Format a single feed entry into HTML.</code></li> </ul> <p>:param entry: Feed entry from the RSS feed. :return: Formatted HTML string.</p> <pre><code>```python\ndef format_feed_entry(entry):\n  \"\"\"\n  Format a single feed entry into HTML.\n\n  :param entry: Feed entry from the RSS feed.\n  :return: Formatted HTML string.\n  \"\"\"\n  return f\"&lt;li&gt;&lt;a href='{entry.link}'&gt;{entry.title}&lt;/a&gt;&lt;/li&gt;\"\n</code></pre> <p>Click here to open the markmap file in a new tab</p>"}]}